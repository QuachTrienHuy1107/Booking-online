{"version":3,"sources":["../node_modules/antd/es/row/index.js","../node_modules/antd/es/col/index.js","utils/helper.ts","pages/reset-password.tsx"],"names":["Row","Col","layout","labelCol","span","wrapperCol","formItemLayout","ResetPassword","Form","useForm","form","React","useState","setError","loading","setLoading","params","useParams","history","useHistory","onFinish","values","a","url","process","API","RESET_PASSWORD","axios","method","data","headers","Authorization","token","response","success","message","content","duration","then","replace","ROUTES","LOGIN","console","log","name","initialValues","remember","justify","className","Item","label","rules","required","Password","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","style","textAlign","type","htmlType","to"],"mappings":"mGAAA,aACeA,MAAf,G,iCCDA,aACeC,MAAf,G,iCCDA,oEAAO,IAAMC,EAAS,CAClBC,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,KAGDE,EAAiB,CAC1BH,SAAU,CAAEC,KAAM,IAClBC,WAAY,CACRD,KAAM,M,oNCkHCG,UAnHiB,WAC5B,MAAeC,IAAKC,UAAbC,EAAP,oBACA,EAA0BC,IAAMC,SAAS,IAAzC,mBAAcC,GAAd,WACA,EAA8BF,IAAMC,UAAS,GAA7C,mBAAOE,EAAP,KAAgBC,EAAhB,KACMC,EAASC,cACTC,EAAUC,cAEVC,EAAQ,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,yDAGRN,EAHQ,iEAKTD,GAAW,GACLQ,EANG,UAMMC,6BANN,OAMsCC,IAAIC,gBAN1C,SAOcC,IAAM,CACzBC,OAAQ,MACRL,MACAM,KAAMR,EACNS,QAAS,CAAEC,cAAc,UAAD,OAAYf,EAAOgB,UAXtC,OAOHC,EAPG,QAcDJ,EAASI,EAATJ,MACGK,SACPC,IACKD,QAAQ,CACLE,QAASP,EAAKM,QACdE,SAAU,KAEbC,MAAK,kBAAMpB,EAAQqB,QAAQC,IAAOC,UArBlC,kDAwBTC,QAAQC,IAAI,QAAS,KAAMR,SAC3BtB,EAAS,KAAMsB,SAzBN,yBA2BTpB,GAAW,GA3BF,6EAAH,sDA+Bd,OACI,cAAC,IAAD,yBACIL,KAAMA,GACFR,KAFR,IAGI0C,KAAK,OACLC,cAAe,CACXC,UAAU,GAEd1B,SAAUA,EAPd,SASI,eAAC,IAAD,CAAK2B,QAAQ,SAASC,UAAU,QAAhC,UACI,cAAC,IAAD,CAAK5C,KAAM,GAAX,SACI,cAAC,IAAK6C,KAAN,2BACQ3C,KADR,IAEIsC,KAAK,cACLM,MAAM,eACNC,MAAO,CACH,CACIC,UAAU,EACVjB,QAAS,gCAPrB,SAWI,cAAC,IAAMkB,SAAP,SAIR,cAAC,IAAD,CAAKjD,KAAM,GAAX,SACI,cAAC,IAAK6C,KAAN,2BACQ3C,KADR,IAEIsC,KAAK,kBACLM,MAAM,mBACNI,aAAc,CAAC,YACfH,MAAO,CACH,CACIC,UAAU,EACVjB,QAAS,iCAEb,gBAAGoB,EAAH,EAAGA,cAAH,MAAwB,CACpBC,UADoB,SACVC,EAAGC,GACT,OAAKA,GAASH,EAAc,iBAAmBG,EAGxCC,QAAQC,OACX,IAAIC,MAAM,qDAHHF,QAAQG,cAbnC,SAsBI,cAAC,IAAMT,SAAP,SAIR,cAAC,IAAD,CAAKjD,KAAM,GAAX,SACI,cAAC,IAAK6C,KAAN,2BAAe3C,KAAf,IAA+ByD,MAAO,CAAEC,UAAW,UAAnD,SACI,cAAC,IAAD,CACIC,KAAK,UACLC,SAAS,SACTlB,UAAU,oCACVlC,QAASA,EAJb,yBAWR,cAAC,IAAD,CAAKV,KAAM,GAAX,SACI,eAAC,IAAK6C,KAAN,CAAWc,MAAO,CAAEC,UAAW,UAA/B,UACI,+DACA,cAAC,IAAD,CAAMG,GAAI3B,IAAOC,MAAjB","file":"static/js/20.b6ba2528.chunk.js","sourcesContent":["import { Row } from '../grid';\nexport default Row;","import { Col } from '../grid';\nexport default Col;","export const layout = {\r\n    labelCol: {\r\n        span: 24,\r\n    },\r\n    wrapperCol: {\r\n        span: 24,\r\n    },\r\n};\r\nexport const formItemLayout = {\r\n    labelCol: { span: 24 },\r\n    wrapperCol: {\r\n        span: 24,\r\n    },\r\n};\r\n","import { Button, Col, Form, Input, message, Row } from \"antd\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport authSvc from \"service/auth.service\";\r\nimport axiosClient from \"service/axiosClient\";\r\nimport { ResetPasswordPayload } from \"types/auth.type\";\r\nimport { API, ROUTES } from \"utils/constant\";\r\nimport { formItemLayout, layout } from \"utils/helper\";\r\n\r\nconst ResetPassword: React.FC = () => {\r\n    const [form] = Form.useForm();\r\n    const [error, setError] = React.useState(\"\");\r\n    const [loading, setLoading] = React.useState(false);\r\n    const params = useParams() as { token: string };\r\n    const history = useHistory();\r\n\r\n    const onFinish = async (values: ResetPasswordPayload) => {\r\n        // disptach(resetPassword(values));\r\n        // isFirst.current = false;\r\n        if (!params) return;\r\n        try {\r\n            setLoading(true);\r\n            const url = `${process.env.REACT_APP_API_URL}${API.RESET_PASSWORD}`;\r\n            const response = await axios({\r\n                method: \"PUT\",\r\n                url,\r\n                data: values,\r\n                headers: { Authorization: `Bearer ${params.token}` },\r\n            });\r\n            // if (!!error) throw new Error(\"INTERNAL SERVER\");\r\n            const { data } = response;\r\n            if (!!data.success) {\r\n                message\r\n                    .success({\r\n                        content: data.message,\r\n                        duration: 0.7,\r\n                    })\r\n                    .then(() => history.replace(ROUTES.LOGIN));\r\n            }\r\n        } catch (error: any) {\r\n            console.log(\"Error\", error.message);\r\n            setError(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            form={form}\r\n            {...layout}\r\n            name=\"form\"\r\n            initialValues={{\r\n                remember: true,\r\n            }}\r\n            onFinish={onFinish}\r\n        >\r\n            <Row justify=\"center\" className=\"login\">\r\n                <Col span={24}>\r\n                    <Form.Item\r\n                        {...formItemLayout}\r\n                        name=\"newPassword\"\r\n                        label=\"New Password\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: \"Please enter your password!\",\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n                </Col>\r\n\r\n                <Col span={24}>\r\n                    <Form.Item\r\n                        {...formItemLayout}\r\n                        name=\"confirmPassword\"\r\n                        label=\"Confirm password\"\r\n                        dependencies={[\"password\"]}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: \"Please confirm your password!\",\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(_, value) {\r\n                                    if (!value || getFieldValue(\"newPassword\") === value) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject(\r\n                                        new Error(\"The two passwords that you entered do not match!\")\r\n                                    );\r\n                                },\r\n                            }),\r\n                        ]}\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n                </Col>\r\n\r\n                <Col span={24}>\r\n                    <Form.Item {...formItemLayout} style={{ textAlign: \"center\" }}>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            className=\"login__btn login__btn--loginLocal\"\r\n                            loading={loading}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Col>\r\n\r\n                <Col span={24}>\r\n                    <Form.Item style={{ textAlign: \"center\" }}>\r\n                        <span>Don't you have an account? </span>\r\n                        <Link to={ROUTES.LOGIN}>Login again</Link>\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}