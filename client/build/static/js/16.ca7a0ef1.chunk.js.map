{"version":3,"sources":["hooks/usePagination.tsx","components/movie-card.tsx","assets/images/loading-page.gif","components/loading-page.tsx","components/shared/title.tsx","pages/movie-list.tsx","hooks/useGetLanguages.tsx","hooks/useGetGenres.tsx"],"names":["usePagination","_page","_size","React","useState","page","size","resPagination","setPagination","handlePageChange","currentPage","MovieCard","memo","movie","isHome","className","hoverable","cover","to","pathname","ROUTES","MOVIEDETAIL","_id","alt","src","poster","title","genres","map","item","join","LoadingPage","style","position","width","height","top","left","zIndex","backgroundColor","display","flexDirection","justifyContent","alignItems","loading","Title","Panel","Collapse","MovieList","dispatch","useAppDispatch","useAppSelector","state","movieSlice","moviePagination","isLoading","error","languages","setLanguages","setError","setLoading","useEffect","a","movieApi","getAllLanguages","response","Error","_prev","data","console","log","message","fetchLanguages","useGetLanguages","setGenres","getAllGenres","useGetGenres","listFilter","setListFilter","getPaginateMoviesAction","toString","replaceAll","length","getFilterMovie","filter","handleReset","Container","Row","Col","xl","lg","bordered","defaultActiveKey","ghost","header","wrap","slice","genre","index","picked","findIndex","onClick","_filter","prev","Array","from","Set","warn","newListFilter","handleFilterMovie","movies","md","defaultCurrent","total","onChange","window","scrollTo","behavior"],"mappings":"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","file":"static/js/16.ca7a0ef1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { PaginationRequestType } from \"types/movie.type\";\r\n\r\nexport default function usePagination(_page: number, _size: number): any {\r\n    const [resPagination, setPagination] = React.useState<PaginationRequestType>({\r\n        page: _page,\r\n        size: _size,\r\n    });\r\n\r\n    const handlePageChange = (currentPage: number) => {\r\n        setPagination({ ...resPagination, page: currentPage });\r\n    };\r\n\r\n    return { resPagination, handlePageChange };\r\n}\r\n","import { Card } from \"antd\";\r\nimport React, { memo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { MovieResponse } from \"types/movie.type\";\r\nimport { ROUTES } from \"utils/constant\";\r\nimport \"../styles/components/_movie-card.scss\";\r\n\r\ninterface IMovieCard {\r\n    movie: MovieResponse;\r\n    isHome?: boolean;\r\n}\r\n\r\nexport const MovieCard: React.FC<IMovieCard> = memo(({ movie, isHome }): JSX.Element => {\r\n    return (\r\n        <div className={`movie ${isHome ? \"movie-recommend\" : \"\"}`} key={movie._id}>\r\n            <Card\r\n                hoverable\r\n                cover={\r\n                    <div className=\"movie__poster\">\r\n                        <Link\r\n                            to={{\r\n                                pathname: `${ROUTES.MOVIEDETAIL}/${movie._id}`,\r\n                            }}\r\n                        >\r\n                            <img className=\"movie__poster--img\" alt=\"\" src={movie.poster} />\r\n                        </Link>\r\n                    </div>\r\n                }\r\n            >\r\n                <div className=\"movie__info\">\r\n                    <Link to={{ pathname: `${ROUTES.MOVIEDETAIL}/${movie._id}` }}>\r\n                        <h1 className=\"movie__content movie__content--title\">{movie.title}</h1>\r\n                    </Link>\r\n                    <span className=\"movie__content movie__content--genres \">\r\n                        {movie.genres?.map((item: string) => item).join(\" / \")}\r\n                    </span>\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    );\r\n});\r\n","export default __webpack_public_path__ + \"static/media/loading-page.6eb15f4c.gif\";","import { Space } from \"antd\";\r\nimport React from \"react\";\r\nimport loading from \"../assets/images/loading-page.gif\";\r\n\r\nexport const LoadingPage: React.FC = () => {\r\n    return (\r\n        <div\r\n            style={{\r\n                position: \"fixed\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                top: 0,\r\n                left: 0,\r\n                zIndex: 9,\r\n                backgroundColor: \"#fff\",\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                }}\r\n            >\r\n                <style></style>\r\n                <span className=\"display-4 text-white\">\r\n                    <Space size=\"middle\">\r\n                        <img src={loading} alt=\"loading\" />\r\n                    </Space>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport \"../../styles/components/shared/_title.scss\";\r\n\r\ninterface ITitle {\r\n    title: string;\r\n}\r\n\r\nconst Title: React.FC<ITitle> = ({ title }) => {\r\n    return <h1 className=\"title\">{title}</h1>;\r\n};\r\n\r\nexport default Title;\r\n","import { Button, Collapse, message, Pagination, Space } from \"antd\";\r\nimport { Loading } from \"components/common/loading\";\r\nimport { LoadingPage } from \"components/loading-page\";\r\nimport { MovieCard } from \"components/movie-card\";\r\nimport Title from \"components/shared/title\";\r\nimport { useGetGenres } from \"hooks/useGetGenres\";\r\nimport { useGetLanguages } from \"hooks/useGetLanguages\";\r\nimport usePagination from \"hooks/usePagination\";\r\nimport React from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { getFilterMovie, getPaginateMoviesAction } from \"store/features/movie.slice\";\r\nimport { useAppDispatch, useAppSelector } from \"store/store\";\r\nimport { MovieResponse } from \"types/movie.type\";\r\nimport \"../styles/pages/_movie-list.scss\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\ninterface IMovies {}\r\n\r\nconst MovieList: React.FC<IMovies> = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { moviePagination, isLoading, error } = useAppSelector((state) => state.movieSlice);\r\n    const { languages } = useGetLanguages();\r\n    const { genres, loading } = useGetGenres();\r\n    const { resPagination, handlePageChange } = usePagination(1, 12);\r\n    const [listFilter, setListFilter] = React.useState<string[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        const data = {\r\n            ...resPagination,\r\n        };\r\n        dispatch(getPaginateMoviesAction(data));\r\n    }, [dispatch, resPagination]);\r\n\r\n    React.useEffect(() => {\r\n        const data = [...listFilter].toString().replaceAll(\",\", \"|\");\r\n\r\n        listFilter.length !== 0 && dispatch(getFilterMovie({ filter: data }));\r\n    }, [dispatch, listFilter]);\r\n\r\n    const handleChange = (page: number) => {\r\n        handlePageChange(page);\r\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    };\r\n\r\n    const handleReset = () => {\r\n        if (listFilter.length === 0) return;\r\n        setListFilter([]);\r\n        dispatch(getPaginateMoviesAction(resPagination));\r\n    };\r\n\r\n    const handleFilterMovie = (_filter: string) => {\r\n        // if (listFilter.length === 3) return;\r\n        const index = listFilter.findIndex((item: string) => item === _filter);\r\n        if (index === -1 && listFilter.length < 4) {\r\n            setListFilter((prev: string[]) => Array.from(new Set([...prev, _filter])));\r\n        } else {\r\n            if (listFilter.length === 4) {\r\n                message.warn(\"The categories must be less than 4\");\r\n            }\r\n            let newListFilter = [...listFilter];\r\n            newListFilter = newListFilter.filter((item: string) => item !== _filter);\r\n\r\n            if (newListFilter.length === 0) {\r\n                handleReset();\r\n                return;\r\n            }\r\n            setListFilter(newListFilter);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"movielist\">\r\n            <Container>\r\n                {loading && <LoadingPage />}\r\n                <Title title=\"Filter\" />\r\n                <Row>\r\n                    <Col xl={3} lg={12}>\r\n                        <div className=\"filter filter__genres\">\r\n                            <Collapse bordered={false} defaultActiveKey={[\"1\"]} ghost>\r\n                                <Panel\r\n                                    header={<span className=\"filter__text filter__text--title\">Genres</span>}\r\n                                    key=\"1\"\r\n                                >\r\n                                    <Space size={[8, 16]} wrap>\r\n                                        {genres?.slice(0, 10).map((genre: string, index: number) => {\r\n                                            const pickIndex = listFilter.findIndex((item: string) => item === genre);\r\n                                            const picked = pickIndex !== -1 ? \"picked\" : \"\";\r\n                                            return (\r\n                                                <Button\r\n                                                    key={index}\r\n                                                    className={`filter__btn filter__btn--genres filter__btn--${picked}`}\r\n                                                    onClick={() => handleFilterMovie(genre)}\r\n                                                >\r\n                                                    <span className=\"filter__text filter__text--genre\">{genre}</span>\r\n                                                </Button>\r\n                                            );\r\n                                        })}\r\n                                    </Space>\r\n                                </Panel>\r\n                            </Collapse>\r\n                        </div>\r\n                        {/* <div className=\"filter filter__languages\">\r\n                            <Collapse bordered={false} defaultActiveKey={[\"1\"]} ghost>\r\n                                <Panel\r\n                                    header={<span className=\"filter__text filter__text--title\">Languages</span>}\r\n                                    key=\"1\"\r\n                                >\r\n                                    <Space size={[8, 16]} wrap>\r\n                                        {languages?.map((language: string, index: number) => {\r\n                                            const pickIndex = listFilter.findIndex((item: string) => item === language);\r\n                                            const picked = pickIndex !== -1 ? \"picked\" : \"\";\r\n                                            return (\r\n                                                <Button\r\n                                                    key={index}\r\n                                                    className={`filter__btn filter__btn--language filter__btn--${picked}`}\r\n                                                    // onClick={() => handleFilterMovie(language)}\r\n                                                >\r\n                                                    <span className=\"filter__text filter__text--genre\">{language}</span>\r\n                                                </Button>\r\n                                            );\r\n                                        })}\r\n                                    </Space>\r\n                                </Panel>\r\n                            </Collapse>\r\n                        </div> */}\r\n\r\n                        <div>\r\n                            <Button className=\"filter__btn filter__btn--clear\" onClick={() => handleReset()}>\r\n                                Clear\r\n                            </Button>\r\n                        </div>\r\n                    </Col>\r\n                    <Col xl={9} lg={12}>\r\n                        {/* {!!isLoading && <Loading />} */}\r\n                        <Row>\r\n                            {moviePagination.movies?.map((movie: MovieResponse) => (\r\n                                <Col md={3} key={movie._id}>\r\n                                    <MovieCard movie={movie} />\r\n                                </Col>\r\n                            ))}\r\n                        </Row>\r\n                        <Row>\r\n                            {listFilter.length === 0 && (\r\n                                <Pagination\r\n                                    defaultCurrent={1}\r\n                                    total={moviePagination.total}\r\n                                    className=\"pagination\"\r\n                                    onChange={handleChange}\r\n                                />\r\n                            )}\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieList;\r\n","import React from \"react\";\r\nimport movieApi from \"service/movie.service\";\r\nimport { useAppDispatch } from \"store/store\";\r\n\r\nexport const useGetLanguages = () => {\r\n    const [languages, setLanguages] = React.useState<string[]>([]);\r\n    const [error, setError] = React.useState(\"\");\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        async function fetchLanguages() {\r\n            try {\r\n                setLoading(true);\r\n                const { response, error }: any = await movieApi.getAllLanguages();\r\n                if (!!error) throw new Error(\"INTERNAL SERVER\");\r\n                setLanguages((_prev: string[]) => [..._prev, ...response.data]);\r\n            } catch (error: any) {\r\n                console.log(\"Error\", error.message);\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetchLanguages();\r\n    }, []);\r\n\r\n    return { languages, loading, error };\r\n};\r\n","import React from \"react\";\r\nimport movieApi from \"service/movie.service\";\r\nimport { useAppDispatch } from \"store/store\";\r\n\r\nexport const useGetGenres = () => {\r\n    const [genres, setGenres] = React.useState<string[]>([]);\r\n    const [error, setError] = React.useState(\"\");\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    React.useEffect(() => {\r\n        async function fetchLanguages() {\r\n            try {\r\n                setLoading(true);\r\n                const { response, error }: any = await movieApi.getAllGenres();\r\n                if (!!error) throw new Error(\"INTERNAL SERVER\");\r\n                setGenres((_prev: string[]) => [..._prev, ...response.data]);\r\n            } catch (error: any) {\r\n                console.log(\"Error\", error.message);\r\n                setError(error.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetchLanguages();\r\n    }, []);\r\n\r\n    return { genres, loading, error };\r\n};\r\n"],"sourceRoot":""}